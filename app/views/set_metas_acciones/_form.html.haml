- observar_propuesta = (@manifestacion_de_interes.accion_en_set_metas_accion == :observacion)
- responder_propuesta = (@manifestacion_de_interes.accion_en_set_metas_accion == :respuesta)
- comite_propuestas = (@manifestacion_de_interes.accion_en_set_metas_accion == :comite)
:javascript
	$(document).ready(function() {
		var acciones_descritas = #{raw json_escape Accion.descritas.to_json}
		var materia_sustancia_descritas = #{raw json_escape MateriaSustancia.descritas.to_json}
		var metas_descritas = #{raw json_escape Clasificacion.descritas(true).to_json}
		var acciones_descritas_por_clasificacion = #{raw json_escape Clasificacion.acciones_descritas.to_json}
		var materia_sustancia_descritas_por_clasificacion = #{raw json_escape Clasificacion.materia_sustancia_descritas.to_json}
		var acSelector = $('#set_metas_accion_accion_id');
		var msSelector = $('#set_metas_accion_materia_sustancia_id');
		var mtSelector = $('#set_metas_accion_meta_id');
		var dmv = $('#set_metas_accion_detalle_medio_verificacion');
		
		//DZC 2018-11-05 11:12:59 se agrega para APL-023
		revisa_valores_dmv();
		dmv.change(function(){
			revisa_valores_dmv();
		});

	
		verificar_si_necesita_agregar_materia_sustancia(acSelector.val());
		actualizar_metas(acSelector.val(),msSelector.val());
		filtrar_modelo_por_clasificacion();

		acSelector.change(function(){
			verificar_si_necesita_agregar_materia_sustancia($(this).val());
		});
		
		msSelector.change(function(){
			actualizar_metas(acSelector.val(),$(this).val());
		});

		//DZC 2018-11-05 11:11:51 revisa si los valores del campo son nulos en cuyo caso no permite guardar
		function revisa_valores_dmv(){
			if (dmv.val() == "") {
				$('.btn-disabled').attr('disabled', 'disabled');
				}
			else{
				$('.btn-disabled').removeAttr('disabled');
			}
		};	

		function verificar_si_necesita_agregar_materia_sustancia(accion_id) {
			if (accion_id != "" && accion_id != undefined) {
				ac = acciones_descritas[accion_id];
				actualizar_metas(accion_id)
				if (#{@set_metas_accion.descripcion_accion.blank? ? 'true' : 'false' }) {
					$('#set_metas_accion_descripcion_accion').val(ac.descripcion)
				}
				if(ac.debe_asociar_materia_sustancia == true){
					msSelector.removeAttr('disabled').addClass('required-field');
					$('label[for="set_metas_accion_materia_sustancia_id"] > abbr').show();
					$('#set_metas_accion_clasificacion_para_filtro.cpf-materia-sustancia').removeAttr('disabled');
				} else {
					msSelector.attr('disabled','disabled').removeClass('required-field').val("");
					$('label[for="set_metas_accion_materia_sustancia_id"] > abbr').hide();
					$('#set_metas_accion_clasificacion_para_filtro.cpf-materia-sustancia').attr('disabled','disabled');
				}
			} else {
				mtSelector.empty().attr('disabled','disabled');
				msSelector.val("").attr('disabled','disabled');
				$('#set_metas_accion_clasificacion_para_filtro.cpf-materia-sustancia').attr('disabled','disabled').val("");
			}
		}
		
		function actualizar_metas(accion_id,materia_sustancia_id) {
			accion = acciones_descritas[accion_id];
			materia_sustancia = materia_sustancia_descritas[materia_sustancia_id];
			metas = { }
			activarSelectorMetas = false
			if (accion != undefined && accion.meta_id != undefined && accion.meta_id != null){
				metas[accion.meta_id] = metas_descritas[accion.meta_id].nombre;
				activarSelectorMetas = true;
			}
			if (materia_sustancia !== undefined && accion.meta_id != materia_sustancia.meta_id) {
				metas[materia_sustancia.meta_id] = metas_descritas[materia_sustancia.meta_id].nombre;
				activarSelectorMetas = true;
			}
			mtSelector.empty();
			$.each(metas,function(meta_id,meta_nombre){
				mtSelector.append("<option value='"+meta_id+"'>"+meta_nombre+"</option>");
			});

			if ( activarSelectorMetas) {
				mtSelector.removeAttr('disabled');
			} else {
				mtSelector.attr('disabled','disabled');
			}
		}

		function filtrar_modelo_por_clasificacion() {
			$('.clasificacion_para_filtro').change(function(){
				if ($(this).hasClass('cpf-accion')) {
					acSelector.empty().append("<option></option>");
					mtSelector.empty().attr('disabled','disabled');
					$('#set_metas_accion_clasificacion_para_filtro.cpf-materia-sustancia').attr('disabled','disabled').val("");
					acd = acciones_descritas_por_clasificacion[$(this).val()];
					acdata = acciones_descritas;
					if (acd !== undefined) { acdata = acd; }
					$.each(acdata,function(clasificacion_id,accion){
						acSelector.append("<option value='"+accion.id+"'>"+accion.nombre+"</option>");
					})
				}
				
				if ($(this).hasClass('cpf-materia-sustancia')) {
					msSelector.empty().append("<option></option>");
					mtSelector.empty().attr('disabled','disabled');
					msd = materia_sustancia_descritas_por_clasificacion[$(this).val()];
					msdata = materia_sustancia_descritas;
					if (msd !== undefined) { msdata = msd; }
					$.each(msdata,function(clasificacion_id,materia_sustancia){
						msSelector.append("<option value='"+materia_sustancia.id+"'>"+materia_sustancia.nombre+"</option>");
					})
				}
			});
		}

		if(#{@manifestacion_de_interes.accion_en_set_metas_accion == :revision || responder_propuesta || @manifestacion_de_interes.accion_en_set_metas_accion == :observacion || (@manifestacion_de_interes.accion_en_set_metas_accion == :comite && !@set_metas_accion.new_record?)}){
			$(".desactivado *").prop('disabled',true);
		}

		if(#{@manifestacion_de_interes.tipo_manifestacion_metas == 2}){
			$("form.edit_set_metas_accion #set_metas_accion_detalle_medio_verificacion, #set_metas_accion_accion_id, #set_metas_accion_clasificacion_para_filtro, #set_metas_accion_materia_sustancia_id, #set_metas_accion_descripcion_accion, #set_metas_accion_alcance_id, #set_metas_accion_meta_id").attr('disabled', true);
		}
		iniciarAutoNumeric();
	});

- url = ''
- if @set_metas_accion.new_record?
	- url = tarea_pendiente_manifestacion_de_interes_set_metas_acciones_path(@tarea_pendiente,@manifestacion_de_interes,@set_metas_accion, accion: @manifestacion_de_interes.accion_en_set_metas_accion, anexo: @set_metas_accion.anexo)
- else
	- url = tarea_pendiente_manifestacion_de_interes_set_metas_accion_path(@tarea_pendiente,@manifestacion_de_interes,@set_metas_accion, accion: @manifestacion_de_interes.accion_en_set_metas_accion)
-#DZC se programa interacción de comentarios entre observaciones y respuestas por propuesta específica 
- externo = externo.nil? ? false : externo
- titulo t(:set_metas_accion) unless externo
- editable = @set_metas_accion.es_editable(@tarea.codigo)
- requerido = 'required-field'
- clasificacion = 'clasificacion_para_filtro cpf-accion im-not-required-check-the-others'
- if comite_propuestas && !@set_metas_accion.new_record?
	- requerido = 'im-not-required-check-the-others'
	-# clasificacion = requerido
	-
= simple_nested_form_for [@tarea_pendiente,@manifestacion_de_interes,@set_metas_accion], url: url, remote: true, html: { autocomplete: :off } do |f|
	.row
		.col-12
			.card
				.card-header
					%h5.no-margin
						= action_label_of_(@set_metas_accion, true)
				.card-body
					#messages-in-modal-remote-block
					.row
						.col-lg-6.pr-lg-0.col-12.desactivado
							= f.input :clasificacion_para_filtro, label: t(:filtrar_modelo_por_clasificación, m: t(:acción).downcase), collection: Clasificacion.where(es_meta: false).all.map{|m|[m.nombre,m.id]}, input_html: { class: 'clasificacion_para_filtro cpf-accion im-not-required-check-the-others' }
						.col-lg-6.desactivado
							= f.input :accion_id, label: t(:acción), collection: Accion.all.map{|m|[m.nombre,m.id]}, input_html: { class: "#{requerido}" }, required: true
						.col-lg-6.pr-lg-0.col-12.desactivado
							= f.input :clasificacion_para_filtro, label: t(:filtrar_modelo_por_clasificación, m: t(:materia_sustancia).downcase), collection: Clasificacion.where(es_meta: false).all.map{|m|[m.nombre,m.id]}, input_html: { class: 'clasificacion_para_filtro cpf-materia-sustancia' }, disabled: true
						.col-lg-6.col-12.desactivado
							= f.input :materia_sustancia_id, label: t(:materia_sustancia), collection: MateriaSustancia.all.map{|m|[m.nombre,m.id]}, required: true, disabled: true
						.col-lg-6.pr-lg-0.col-12.desactivado
							= f.input :meta_id, label: t(:meta), collection: [], input_html: { class: "#{requerido}" }, required: true, disabled: true
						.col-lg-3.pr-lg-0.col-12.desactivado
							= f.input :valor_referencia, label: t(:valor_referencia), input_html: { class: "#{requerido}" }, required: true
						.col-lg-3.col-12.desactivado
							-#
								= f.input :tipo_cuantitativa, label: t(:tipo_cuantitativa), input_html: { type: :range }, wrapper_class: 'range-slider'
						.col-lg-4.pr-lg-0.col-12.desactivado
							= f.input :descripcion_accion, label: t(:descripción_acción), input_html: { class: "#{requerido}" }, required: true
						-
						- if comite_propuestas 
							.col-lg-4.pr-lg-0.col-12
								= f.input :detalle_medio_verificacion, label: t(:detalle_medio_verificación), input_html: { class: '' }, required: true
							.col-lg-4
								= f.input :criterio_inclusion_exclusion, label: t(:criterio_inclusión_exclusión), input_html: { class: '' }, required: false
						- else
							.col-lg-4.pr-lg-0.col-12.desactivado
								= f.input :detalle_medio_verificacion, label: t(:detalle_medio_verificación), input_html: { class: "#{requerido}" }, required: true
							.col-lg-4.desactivado
								= f.input :criterio_inclusion_exclusion, label: t(:criterio_inclusión_exclusión), input_html: { class: "#{requerido}" }, required: true
						.col-lg-6.pr-lg-0.col-12.desactivado
							= f.input :alcance_id, label: t(:alcance), collection: Alcance.all.map{|m|[m.nombre,m.id]}, input_html: { class: "#{requerido}" }, required: true
						.col-lg-3.pr-lg-0.col-12.desactivado
							= f.input :plazo_valor, as: :integer, label: t(:plazo_valor), input_html: { class: "#{requerido} mayor-igual-a-cero", min: (0) }, required: true
						.col-lg-3.col-12.desactivado
							= f.input :plazo_unidad_tiempo, collection: SetMetasAccion.plazo_unidad_tiempos.map{|u,i|[t("#{u}"),u]}, label: t(:plazo_unidad_tiempo), input_html: { class: "#{requerido}" }, required: true
						- if observar_propuesta || responder_propuesta 
							.col-lg-6.col-12
								= f.input :comentario, as: :text, input_html: { class: "#{requerido}", rows: 3 }, disabled: (!observar_propuesta || responder_propuesta)
							.col-lg-6.col-12
								= f.input :comentario_respuesta, as: :text, input_html: { rows: 3 }, label: t(:respuesta_de_comentarios), disabled: (observar_propuesta || !responder_propuesta)
	.float-right
		-
		- if @tarea_pendiente.tarea.codigo == Tarea::COD_APL_013
			= link_to t(:back), cargar_actualizar_entregable_diagnostico_manifestacion_de_interes_path(@tarea_pendiente, @manifestacion_de_interes), class: 'btn btn-sm btn-warning'
		- else
			= link_to t(:back), tarea_pendiente_manifestacion_de_interes_set_metas_acciones_path(@tarea_pendiente,@manifestacion_de_interes), class: 'btn btn-sm btn-warning'
		= button_tag t(:save), 'data-disable-with' => "<i class='fa fa-spinner fa-spin'></i> Guardando...".html_safe, id: 'consultar-button', class: "btn btn-sm btn-primary #{((observar_propuesta || responder_propuesta) ? '' : 'btn-disabled')} button-send", disabled: ((observar_propuesta || responder_propuesta) ? false : :disabled)

