- externo = externo.nil? ? false : externo
- if ! @manifestacion_de_interes.blank? && @manifestacion_de_interes.accion_en_documento_diagnostico == :revision 
  - indicar_documentos_con_observaciones = true
  - url = enviar_revision_documento_diagnosticos_manifestacion_de_interes_path(@tarea_pendiente,@manifestacion_de_interes)
- if ! @manifestacion_de_interes.blank? && @manifestacion_de_interes.accion_en_documento_diagnostico == :actualizacion
  - ver_documentos_con_observaciones = true
  - url = actualizar_documento_diagnosticos_manifestacion_de_interes_path(@tarea_pendiente,@manifestacion_de_interes)
= simple_nested_form_for @manifestacion_de_interes, url: url, remote: true, html: { autocomplete: :off } do |f|
  .card
    .card-header
      %h5.m-0.float-left
        = t(:lista_de_, items: t(:documentos_diagnósticos).downcase)
      - unless @manifestacion_de_interes.accion_en_documento_diagnostico == :revision 
        = f.link_to_add :documento_diagnosticos, data: { target: "#documento-diagnosticos" }, class: 'float-right' do
          = t(:agregar)
          %i.fa.fa-plus-circle
    .card-body
      .table-responsive.mb-3
        %table#documento-diagnosticos.table.table-striped.mb-0.estandar-tabla
          %thead
            %tr
              %th=t(:tipo_documento_diagnostico)
              %th=t(:nombre)
              %th.text-center=t(:público?)
              %th.text-center=t(:documento)
              %th.text-center=t(:requiere_correcciones?)
              %th
          %tbody
            = f.fields_for :documento_diagnosticos, @manifestacion_de_interes.documento_diagnosticos.order("id ASC"), wrapper: false  do |dd|
              %tr.fields
                - if ver_documentos_con_observaciones
                  %td.p-0.align-middle
                    = dd.input :tipo_documento_diagnostico_id, label: false, collection: TipoDocumentoDiagnostico.all.map{|c|[c.nombre,c.id]}, input_html: { class: 'required-field p-0 campo-tipo-documento' }, required: true, wrapper_class: 'm-0'
                  %td.py-0.align-middle
                    = dd.input :nombre, label: false, input_html: { class: 'required-field p-0 form-control', style: "height: calc(2.25rem + 2px);" }, wrapper_class: 'm-0'
                  %td.py-0.text-center.align-middle
                    = dd.input :publico, label: false, input_html: { class: 'im-not-required-check-the-others p-0 form-control' }, wrapper_class: 'm-0 chk-m-0'
                  %td.py-0.text-center.align-middle
                    .d-flex.align.items-center.mb-1
                      = dd.input :archivo, label: false, input_html: { class: "#{dd.object.archivo.blank? ? 'required-field' : ''}" }, wrapper_class: 'text-left'
                      = dd.hidden_field :archivo_cache
                      - unless dd.object.archivo.blank?
                        %i.fa.fa-check-circle.float-right.tooltip-block.text-success.fa-2x.ml-2{title: dd.object.archivo.file.filename}
                  %td.py-0.text-center.align-middle
                    = dd.object.requiere_correcciones ? (t(:yes_with_fa_times).html_safe) : t(:no_with_fa_check).html_safe
                  %td.accion.no-padding.remove-row
                    = dd.link_to_remove do
                      %i.fa.fa-times-circle.left.link-to-remove-row
                - elsif indicar_documentos_con_observaciones 
                  %td.p-o
                    = dd.fields_for :tipo_documento_diagnostico, wrapper: false do |td|
                      = td.object.nombre
                  %td.p-o
                    = dd.object.nombre
                  %td.p-o.text-center
                    = dd.object.publico ? "Si" : "No"
                  %td.p-o.text-center
                    = link_to dd.object.archivo.url, download: '', class: "btn btn-tabla" do
                      %i.fa.fa-download.p-1
                      #{dd.object.archivo.file.filename}
                  %td.p-0.text-center.align-middle
                    = dd.input :requiere_correcciones, label: false, input_html: { class: 'im-not-required-check-the-others p-0 correcciones' }, wrapper_class: 'm-0 chk-m-0'
                  %td
      .row
        - if @manifestacion_de_interes.accion_en_documento_diagnostico == :revision
          .co-12.col-lg-4
            .form-group.boolean.required.manifestacion_de_interes_aprueba_documentos_diagnostico{class: ('has-error' if f.object.errors.messages.has_key?(:aprueba_documentos_diagnostico))}
              %label.boolean.required{for: :manifestacion_de_interes_aprueba_documentos_diagnostico}
                %abbr{:title => "required"} *
                = t(:aprueba_documentos_diagnostico)
              .radio-buttons
                = f.collection_radio_buttons :aprueba_documentos_diagnostico, [[true, t(:yes)] ,[false, t(:no)]], :first, :last, checked: false
          .col-lg-8.col-12
            = f.input :comentarios_y_observaciones_documento_diagnosticos, disabled: true, label: t(:comentarios_y_observaciones_documento_diagnosticos), required: true, input_html: {value: @manifestacion_de_interes.comentarios_y_observaciones_documento_diagnosticos}
        -# elsif @manifestacion_de_interes.accion_en_documento_diagnostico == :actualizacion
        .col-12
          .form-group
            %label.string
              = t(:comentarios)
          .table-responsive
            %table.table.table-striped
              %thead
                %tr
                  %th=t(:fecha_y_hora)
                  %th=t(:usuario)
                  %th=t(:texto)
              %tbody
                -
                - @comentarios.each do |c|
                  %tr
                    %td=l c[:datetime], format: '%d-%m-%Y %H:%M:%S'
                    %td=c[:user]
                    %td=c[:texto]
          
  .float-right.mr-3.mb-3
    - unless externo
      = link_to t(:back), root_path, class: 'btn btn-sm btn-warning ml-1'
    - boton_disable = (@tarea.codigo == "APL-013") ? nil : :disabled
    - boton_tipo = (@tarea.codigo == "APL-013") ? nil : "btn-disabled"
    = button_tag t(:save), 'data-disable-with' => "<i class='fa fa-spinner fa-spin'></i> Guardando...".html_safe, class: "btn btn-sm btn-primary button-send actualizar-mapa-de-actores-button #{boton_tipo}", disabled: boton_disable
:javascript
  $(document).ready(function(){
    if ("#{@tarea.codigo}" != "APL-013"){
      debeComentar($('input[name="manifestacion_de_interes[aprueba_documentos_diagnostico]"]:checked'),true);
      if (documentos_requieren_correcciones()){
        debeComentar($('input[name="manifestacion_de_interes[aprueba_documentos_diagnostico]"]:checked'),true);
      };
    };
    $('input[name="manifestacion_de_interes[aprueba_documentos_diagnostico]"]').click(function(){
      if ($('input[name="manifestacion_de_interes[aprueba_documentos_diagnostico]"]:checked').val() == "true"){
        $('.fields').each(function(){
          $(this).find('.correcciones').prop('checked', false);
        });
      };
      debeComentar(this,true);
    });
    // DZC 2018-10-09 14:54:05 revisa si se selecciona la opción "requiere correcciones"
    $('.correcciones').click(function(){
      if (documentos_requieren_correcciones()){
        // DZC 2018-10-09 14:55:49 cambia la opción seleccionada en "Aprueba documentos" acorde a si se ha o no elegido la opción "requiere correcciones"
        $('input[name="manifestacion_de_interes[aprueba_documentos_diagnostico]"]:last').prop('checked', true);
        debeComentar($('input[name="manifestacion_de_interes[aprueba_documentos_diagnostico]"]:checked'),true);
      };
    });

    function debeComentar(checkbox,checkValidity) {
      c = $('#manifestacion_de_interes_comentarios_y_observaciones_documento_diagnosticos');
      id  = $(checkbox).attr("id");
      if(~id.indexOf("false")) {
        c.removeAttr('disabled').addClass('required-field');
        $('label[for="manifestacion_de_interes_comentarios_y_observaciones_documento_diagnosticos"] > abbr').show();
      } else if (~id.indexOf("true")) {
        c.attr('disabled','disabled').val("").removeClass('required-field');
        $('label[for="manifestacion_de_interes_comentarios_y_observaciones_documento_diagnosticos"] > abbr').hide();
      }
      if ( checkValidity ) {
        checkFieldValidity(c);
      }
    }
    //DZC revisa si se encuentra seleccionado para corrección a lo menos un tipo de documento de diagnóstico 
    function documentos_requieren_correcciones(){
      var cantidad_que_requiere = 0;
      requieren = false;
      $('.fields').each(function(){      
        if ($(this).find('.correcciones').is(':checked')){
          cantidad_que_requiere += 1;
        };
      });
      if (cantidad_que_requiere >0){
        requieren = true;
      };
      return requieren;
    };
  });